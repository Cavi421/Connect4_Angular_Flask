{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction HelloWorldComponent_button_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵtext(1, \"Submit\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HelloWorldComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const token_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMapInterpolate1(\"disc \", token_r3.color, \"\");\n    i0.ɵɵstyleProp(\"top\", token_r3.position_top)(\"left\", token_r3.position_left);\n    i0.ɵɵpropertyInterpolate1(\"id\", \"d\", token_r3.token_id, \"\");\n  }\n}\nfunction HelloWorldComponent_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const wt_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"top\", wt_r5.position_top)(\"left\", wt_r5.position_left);\n  }\n}\nexport class HelloWorldComponent {\n  constructor(http) {\n    this.http = http;\n    this.matrix_board = [];\n    this.data_form = {\n      answer: '1'\n    }; //default column choice\n    this.msg_to_show = '';\n    this.show_button = true;\n    //Used to add tokens inside the gameboard\n    this.tokens_to_add = [];\n    //Used to mark winning tokens\n    this.winning_tokens = [];\n  }\n  //Fill Matrix\n  ngOnInit() {\n    for (let row = 0; row < 6; row++) {\n      this.matrix_board.push([]);\n      for (let column = 0; column < 7; column++) {\n        this.matrix_board[row].push(0);\n      }\n    }\n  }\n  //SEND REQUESTS METHOD\n  sendPostRequest(url, data) {\n    return this.http.post(url, data);\n  }\n  //Send requests when the button is pressed\n  //This sends the state of che current matrix and the answer\n  //There is no check for the matrix so a player could send a modified one altering the game\n  //Could be a better idea to store the matrix on a DB so also the state is preserved\n  onSubmit() {\n    let api_url = 'http://localhost:5000';\n    let post_data = {\n      data: {\n        answer: this.data_form.answer\n      },\n      matrix_board: this.matrix_board\n    };\n    //SEND REQUEST TO FLASK\n    this.sendPostRequest(api_url, post_data).subscribe({\n      next: response => this.parseSuccess(response),\n      error: e => console.error(e)\n    });\n  }\n  parseSuccess(response) {\n    let human_move_result = this.parseHumanMove(response);\n    //If human move result is false it means:\n    //Invalid move, then the user will need to re-submit another choice\n    //Game is finished so it's pointeless to execute the AI check\n    if (human_move_result == false) {\n      return false;\n    }\n    let ai_move_result = this.parseAIMove(response);\n    if (ai_move_result == false) {\n      return false;\n    }\n    return true;\n  }\n  //Check if the human move is correct and returns errors in case\n  parseHumanMove(response) {\n    //Stores json response into variables\n    let human_reponse = response['human'];\n    let human_last_move_column = human_reponse['last_move'][1];\n    let human_last_move_row = human_reponse['last_move'][0];\n    let human_result = human_reponse['result'];\n    let human_msg = human_reponse['msg'];\n    let human_matrix_board = human_reponse['matrix_board'];\n    let human_token_id = human_reponse['token_id'];\n    //Check if flask returned any error, e.g. column is full\n    if (human_result == false) {\n      console.log(human_msg);\n      this.msg_to_show = human_msg;\n      return false;\n    }\n    //Update board\n    this.matrix_board = human_reponse['matrix_board'];\n    //Calculate token's left,top position in pixels\n    let position_left, position_top;\n    [position_left, position_top] = this.calculateTokenPositionsCSS(human_last_move_row, human_last_move_column, 31, 32);\n    //Add tokens to array. This array will be shown in the html template\n    let token_to_add = {\n      color: 'yellow',\n      column: human_last_move_column,\n      row: human_last_move_row,\n      token_id: human_token_id,\n      position_left: position_left + 'px',\n      position_top: position_top + 'px'\n    };\n    //Update msg and add token to the board\n    this.tokens_to_add.push(token_to_add);\n    this.msg_to_show = human_msg;\n    //If game is won by player 1 or game is draw then destroy the submit button to stop the game\n    if (this.checkIfGameWonOrDraw(response, 'human') == false) {\n      return false;\n    }\n    //If all the other conditions pass then it's AI turn, otherwise game is finished or player\n    //inserted a bad input\n    return true;\n  }\n  parseAIMove(response) {\n    //Json response stored in variables\n    let ai_response = response['ai'];\n    let ai_last_move_column = ai_response['last_move'][1];\n    let ai_last_move_row = ai_response['last_move'][0];\n    let ai_result = ai_response['result'];\n    let ai_msg = ai_response['msg'];\n    let ai_matrix_board = ai_response['matrix_board'];\n    let ai_token_id = ai_response['token_id'];\n    //console.log(ai_msg, ai_result, ai_matrix_board, ai_last_move_row, ai_last_move_column)\n    //Update the matrix with the AI move\n    this.matrix_board = ai_matrix_board;\n    //Calculate token's left,top position in pixels\n    let position_left, position_top;\n    [position_left, position_top] = this.calculateTokenPositionsCSS(ai_last_move_row, ai_last_move_column, 31,\n    //Starting margin\n    32 //Starting margin\n    );\n\n    let token_to_add_ai = {\n      color: 'red',\n      column: ai_last_move_column,\n      row: ai_last_move_row,\n      token_id: ai_token_id,\n      position_left: position_left + 'px',\n      position_top: position_top + 'px'\n    };\n    this.tokens_to_add.push(token_to_add_ai);\n    //If game is won by player 1 or game is draw then destroy the submit button to stop the game\n    if (this.checkIfGameWonOrDraw(response, 'ai') == false) {\n      return false;\n    }\n    return true;\n  }\n  //Calculate the css top and left margin used to place the tokens inside the gameboard\n  calculateTokenPositionsCSS(last_move_row, last_move_column, starting_margin_top, starting_margin_left) {\n    //Create CSS style rules to position the tokens\n    let position_left = starting_margin_top + last_move_column * 87;\n    let position_top = starting_margin_left + last_move_row * 87;\n    return [position_left, position_top];\n  }\n  //If game is won or draw, make the button disappear\n  checkIfGameWonOrDraw(response, human_or_ai) {\n    if (response[human_or_ai]['is_game_draw'] == true || response[human_or_ai]['is_game_won'] == true) {\n      this.show_button = false;\n      this.msg_to_show = response[human_or_ai]['msg'];\n      this.colorWinningTokens(response[human_or_ai]['winning_cells']);\n      return false;\n    }\n    return true;\n  }\n  // Marks the winning tokens taking\n  colorWinningTokens(cells_array) {\n    //Loop through winning cells\n    cells_array.forEach(cell => {\n      let row = cell[0];\n      let column = cell[1];\n      //Calculate the positions in pixels to mark the winning token\n      let position_left, position_top;\n      [position_left, position_top] = this.calculateTokenPositionsCSS(row, column, 50, 48);\n      let winning_token = {\n        //\"row\": row,\n        //\"column\": column,\n        position_left: position_left + 'px',\n        position_top: position_top + 'px'\n      };\n      this.winning_tokens.push(winning_token);\n    });\n  }\n  static #_ = this.ɵfac = function HelloWorldComponent_Factory(t) {\n    return new (t || HelloWorldComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HelloWorldComponent,\n    selectors: [[\"app-hello-world\"]],\n    decls: 35,\n    vars: 11,\n    consts: [[\"id\", \"info_msg\", 1, \"info\"], [\"id\", \"column_form\", 3, \"ngSubmit\"], [\"type\", \"radio\", \"name\", \"answer\", \"value\", \"1\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"radio\", \"name\", \"answer\", \"value\", \"2\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"radio\", \"name\", \"answer\", \"value\", \"3\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"radio\", \"name\", \"answer\", \"value\", \"4\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"radio\", \"name\", \"answer\", \"value\", \"5\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"radio\", \"name\", \"answer\", \"value\", \"6\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"radio\", \"name\", \"answer\", \"value\", \"7\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 4, \"ngIf\"], [\"id\", \"game-base\"], [\"id\", \"game-table\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"submit\"], [3, \"id\"], [1, \"winning_token\"]],\n    template: function HelloWorldComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Connect Four Game\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"h6\");\n        i0.ɵɵtext(3, \"(You play as yellow, red is an AI)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"h2\", 0);\n        i0.ɵɵtext(5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\")(7, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function HelloWorldComponent_Template_form_ngSubmit_7_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(8, \"label\")(9, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function HelloWorldComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.data_form.answer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10, \"1st\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"label\")(12, \"input\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function HelloWorldComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.data_form.answer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \"2nd\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"label\")(15, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function HelloWorldComponent_Template_input_ngModelChange_15_listener($event) {\n          return ctx.data_form.answer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(16, \"3rd\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"label\")(18, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function HelloWorldComponent_Template_input_ngModelChange_18_listener($event) {\n          return ctx.data_form.answer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(19, \"4th\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"label\")(21, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function HelloWorldComponent_Template_input_ngModelChange_21_listener($event) {\n          return ctx.data_form.answer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(22, \"5th\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"label\")(24, \"input\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function HelloWorldComponent_Template_input_ngModelChange_24_listener($event) {\n          return ctx.data_form.answer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(25, \"6th\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"label\")(27, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function HelloWorldComponent_Template_input_ngModelChange_27_listener($event) {\n          return ctx.data_form.answer = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(28, \"7th\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"br\");\n        i0.ɵɵtemplate(30, HelloWorldComponent_button_30_Template, 2, 0, \"button\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(31, \"div\", 10)(32, \"div\", 11);\n        i0.ɵɵtemplate(33, HelloWorldComponent_div_33_Template, 2, 10, \"div\", 12);\n        i0.ɵɵtemplate(34, HelloWorldComponent_div_34_Template, 2, 6, \"div\", 12);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(ctx.msg_to_show);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.data_form.answer);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.data_form.answer);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.data_form.answer);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.data_form.answer);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.data_form.answer);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.data_form.answer);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.data_form.answer);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.show_button == true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.tokens_to_add);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.winning_tokens);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.RadioControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm],\n    styles: [\"label[_ngcontent-%COMP%] {\\n    display: inline-block;\\n    margin-left: 20px;\\n    margin-right: 25px;\\n}\\n\\n\\nbody[_ngcontent-%COMP%] {\\n    background: #eee;\\n}\\n\\nh1[_ngcontent-%COMP%], h6[_ngcontent-%COMP%] {\\n    text-align: center;\\n    margin-bottom: 5px;\\n}\\n\\nh2.info[_ngcontent-%COMP%]{\\n    text-align: center;\\n    width: 400px;\\n    margin: 0 auto;\\n    font-size: 16px;\\n    font-weight: bold;\\n    color: #666;\\n    margin-bottom: 20px;\\n}\\n\\ninput[_ngcontent-%COMP%] {\\n\\n    margin-bottom: 20px;\\n\\n}\\n\\n#column_form[_ngcontent-%COMP%] {\\n    text-align: center;\\n}\\n\\n#game-base[_ngcontent-%COMP%] {\\n    width: 640px;\\n    margin: 0 auto;\\n    padding-top: 20px;\\n}\\n\\n#game-table[_ngcontent-%COMP%] {\\n    width: 639px;\\n    height: 553px;\\n    margin: 0 auto;\\n    background: url(\\\"https://upload.wikimedia.org/wikipedia/commons/8/87/Connect4_Empty.PNG\\\") 0 0 no-repeat;\\n    position: relative;\\n}\\n\\n.disc[_ngcontent-%COMP%] {\\n    position: absolute;\\n    z-index: 1;\\n    top: -55px;\\n    left: 14px;\\n    width: 55px;\\n    height: 55px;\\n    border-radius: 55px;\\n    transition: all .3s;\\n}\\n\\n.disc.red[_ngcontent-%COMP%] {\\n    background: #d96666;\\n}\\n\\n.disc.yellow[_ngcontent-%COMP%] {\\n    background: #ffeb79;\\n}\\n\\n\\n.winning_token[_ngcontent-%COMP%] {\\n    position: absolute;\\n    z-index: 2;\\n    top: -55px;\\n    left: 14px;\\n    width: 20px;\\n    height: 20px;\\n    border-radius: 55px;\\n    transition: all .3s;\\n    background-color: black;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaGVsbG8td29ybGQvaGVsbG8td29ybGQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHFCQUFxQjtJQUNyQixpQkFBaUI7SUFDakIsa0JBQWtCO0FBQ3RCOzs7QUFHQTtJQUNJLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLGNBQWM7SUFDZCxlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCxtQkFBbUI7QUFDdkI7O0FBRUE7O0lBRUksbUJBQW1COztBQUV2Qjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLFlBQVk7SUFDWixjQUFjO0lBQ2QsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixjQUFjO0lBQ2QsdUdBQXVHO0lBQ3ZHLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7SUFDVixXQUFXO0lBQ1gsWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxtQkFBbUI7QUFDdkI7OztBQUdBO0lBQ0ksa0JBQWtCO0lBQ2xCLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFdBQVc7SUFDWCxZQUFZO0lBQ1osbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQix1QkFBdUI7QUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyJsYWJlbCB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBtYXJnaW4tbGVmdDogMjBweDtcclxuICAgIG1hcmdpbi1yaWdodDogMjVweDtcclxufVxyXG5cclxuXHJcbmJvZHkge1xyXG4gICAgYmFja2dyb3VuZDogI2VlZTtcclxufVxyXG5cclxuaDEsIGg2IHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxufVxyXG5cclxuaDIuaW5mb3tcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHdpZHRoOiA0MDBweDtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICBjb2xvcjogIzY2NjtcclxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbn1cclxuXHJcbmlucHV0IHtcclxuXHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG5cclxufVxyXG5cclxuI2NvbHVtbl9mb3JtIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuI2dhbWUtYmFzZSB7XHJcbiAgICB3aWR0aDogNjQwcHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xyXG59XHJcblxyXG4jZ2FtZS10YWJsZSB7XHJcbiAgICB3aWR0aDogNjM5cHg7XHJcbiAgICBoZWlnaHQ6IDU1M3B4O1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCJodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLzgvODcvQ29ubmVjdDRfRW1wdHkuUE5HXCIpIDAgMCBuby1yZXBlYXQ7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi5kaXNjIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICB0b3A6IC01NXB4O1xyXG4gICAgbGVmdDogMTRweDtcclxuICAgIHdpZHRoOiA1NXB4O1xyXG4gICAgaGVpZ2h0OiA1NXB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTVweDtcclxuICAgIHRyYW5zaXRpb246IGFsbCAuM3M7XHJcbn1cclxuXHJcbi5kaXNjLnJlZCB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZDk2NjY2O1xyXG59XHJcblxyXG4uZGlzYy55ZWxsb3cge1xyXG4gICAgYmFja2dyb3VuZDogI2ZmZWI3OTtcclxufVxyXG5cclxuXHJcbi53aW5uaW5nX3Rva2VuIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHotaW5kZXg6IDI7XHJcbiAgICB0b3A6IC01NXB4O1xyXG4gICAgbGVmdDogMTRweDtcclxuICAgIHdpZHRoOiAyMHB4O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTVweDtcclxuICAgIHRyYW5zaXRpb246IGFsbCAuM3M7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵclassMapInterpolate1","token_r3","color","ɵɵstyleProp","position_top","position_left","ɵɵpropertyInterpolate1","token_id","wt_r5","HelloWorldComponent","constructor","http","matrix_board","data_form","answer","msg_to_show","show_button","tokens_to_add","winning_tokens","ngOnInit","row","push","column","sendPostRequest","url","data","post","onSubmit","api_url","post_data","subscribe","next","response","parseSuccess","error","e","console","human_move_result","parseHumanMove","ai_move_result","parseAIMove","human_reponse","human_last_move_column","human_last_move_row","human_result","human_msg","human_matrix_board","human_token_id","log","calculateTokenPositionsCSS","token_to_add","checkIfGameWonOrDraw","ai_response","ai_last_move_column","ai_last_move_row","ai_result","ai_msg","ai_matrix_board","ai_token_id","token_to_add_ai","last_move_row","last_move_column","starting_margin_top","starting_margin_left","human_or_ai","colorWinningTokens","cells_array","forEach","cell","winning_token","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","HelloWorldComponent_Template","rf","ctx","ɵɵlistener","HelloWorldComponent_Template_form_ngSubmit_7_listener","HelloWorldComponent_Template_input_ngModelChange_9_listener","$event","HelloWorldComponent_Template_input_ngModelChange_12_listener","HelloWorldComponent_Template_input_ngModelChange_15_listener","HelloWorldComponent_Template_input_ngModelChange_18_listener","HelloWorldComponent_Template_input_ngModelChange_21_listener","HelloWorldComponent_Template_input_ngModelChange_24_listener","HelloWorldComponent_Template_input_ngModelChange_27_listener","ɵɵtemplate","HelloWorldComponent_button_30_Template","HelloWorldComponent_div_33_Template","HelloWorldComponent_div_34_Template","ɵɵtextInterpolate","ɵɵproperty"],"sources":["/code/angular_app/src/app/hello-world/hello-world.component.ts","/code/angular_app/src/app/hello-world/hello-world.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: ['./hello-world.component.css'],\n})\nexport class HelloWorldComponent implements OnInit {\n  matrix_board: number[][] = [];\n  data_form = { answer: '1' }; //default column choice\n  msg_to_show = '';\n  show_button: boolean = true;\n\n  //Used to add tokens inside the gameboard\n  tokens_to_add: any[] = [];\n\n  //Used to mark winning tokens\n  winning_tokens: any[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  //Fill Matrix\n  ngOnInit(): void {\n    for (let row = 0; row < 6; row++) {\n      this.matrix_board.push([]);\n\n      for (let column = 0; column < 7; column++) {\n        this.matrix_board[row].push(0);\n      }\n    }\n  }\n\n  //SEND REQUESTS METHOD\n  sendPostRequest(url: string, data: any) {\n    return this.http.post(url, data);\n  }\n\n  //Send requests when the button is pressed\n  //This sends the state of che current matrix and the answer\n  //There is no check for the matrix so a player could send a modified one altering the game\n  //Could be a better idea to store the matrix on a DB so also the state is preserved\n  onSubmit() {\n    let api_url: string = 'http://localhost:5000';\n    let post_data: any = {\n      data: { answer: this.data_form.answer },\n      matrix_board: this.matrix_board,\n    };\n\n    //SEND REQUEST TO FLASK\n    this.sendPostRequest(api_url, post_data).subscribe({\n      next: (response) => this.parseSuccess(response),\n      error: (e) => console.error(e),\n    });\n  }\n\n  parseSuccess(response: any): boolean {\n    let human_move_result: boolean = this.parseHumanMove(response);\n\n    //If human move result is false it means:\n    //Invalid move, then the user will need to re-submit another choice\n    //Game is finished so it's pointeless to execute the AI check\n    if (human_move_result == false) {\n      return false;\n    }\n\n    let ai_move_result: boolean = this.parseAIMove(response);\n\n    if (ai_move_result == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n  //Check if the human move is correct and returns errors in case\n  parseHumanMove(response: any): boolean {\n    //Stores json response into variables\n    let human_reponse: any = response['human'];\n    let human_last_move_column: number = human_reponse['last_move'][1];\n    let human_last_move_row: number = human_reponse['last_move'][0];\n    let human_result: boolean = human_reponse['result'];\n    let human_msg: string = human_reponse['msg'];\n    let human_matrix_board: number[][] = human_reponse['matrix_board'];\n    let human_token_id: number = human_reponse['token_id'];\n\n    //Check if flask returned any error, e.g. column is full\n    if (human_result == false) {\n      console.log(human_msg);\n      this.msg_to_show = human_msg;\n      return false;\n    }\n\n    //Update board\n    this.matrix_board = human_reponse['matrix_board'];\n\n    //Calculate token's left,top position in pixels\n    let position_left: number, position_top: number;\n    [position_left, position_top] = this.calculateTokenPositionsCSS(\n      human_last_move_row,\n      human_last_move_column,\n      31,\n      32\n    );\n\n    //Add tokens to array. This array will be shown in the html template\n    let token_to_add = {\n      color: 'yellow',\n      column: human_last_move_column,\n      row: human_last_move_row,\n      token_id: human_token_id,\n      position_left: position_left + 'px',\n      position_top: position_top + 'px',\n    };\n\n    //Update msg and add token to the board\n    this.tokens_to_add.push(token_to_add);\n    this.msg_to_show = human_msg;\n\n    //If game is won by player 1 or game is draw then destroy the submit button to stop the game\n    if (this.checkIfGameWonOrDraw(response, 'human') == false) {\n      return false;\n    }\n\n    //If all the other conditions pass then it's AI turn, otherwise game is finished or player\n    //inserted a bad input\n    return true;\n  }\n\n  parseAIMove(response: any): boolean {\n    //Json response stored in variables\n    let ai_response: any = response['ai'];\n    let ai_last_move_column: number = ai_response['last_move'][1];\n    let ai_last_move_row: number = ai_response['last_move'][0];\n    let ai_result: boolean = ai_response['result'];\n    let ai_msg: string = ai_response['msg'];\n    let ai_matrix_board: number[][] = ai_response['matrix_board'];\n    let ai_token_id: number = ai_response['token_id'];\n\n    //console.log(ai_msg, ai_result, ai_matrix_board, ai_last_move_row, ai_last_move_column)\n\n    //Update the matrix with the AI move\n    this.matrix_board = ai_matrix_board;\n\n    //Calculate token's left,top position in pixels\n    let position_left: number, position_top: number;\n    [position_left, position_top] = this.calculateTokenPositionsCSS(\n      ai_last_move_row,\n      ai_last_move_column,\n      31, //Starting margin\n      32 //Starting margin\n    );\n\n    let token_to_add_ai = {\n      color: 'red',\n      column: ai_last_move_column,\n      row: ai_last_move_row,\n      token_id: ai_token_id,\n      position_left: position_left + 'px',\n      position_top: position_top + 'px',\n    };\n\n    this.tokens_to_add.push(token_to_add_ai);\n\n    //If game is won by player 1 or game is draw then destroy the submit button to stop the game\n    if (this.checkIfGameWonOrDraw(response, 'ai') == false) {\n      return false;\n    }\n\n    return true;\n  }\n\n  //Calculate the css top and left margin used to place the tokens inside the gameboard\n  calculateTokenPositionsCSS(\n    last_move_row: number,\n    last_move_column: number,\n    starting_margin_top: number,\n    starting_margin_left: number\n  ): number[] {\n    //Create CSS style rules to position the tokens\n    let position_left: number = starting_margin_top + last_move_column * 87;\n    let position_top: number = starting_margin_left + last_move_row * 87;\n\n    return [position_left, position_top];\n  }\n\n  //If game is won or draw, make the button disappear\n  checkIfGameWonOrDraw(response: any, human_or_ai: string): boolean {\n    if (\n      response[human_or_ai]['is_game_draw'] == true ||\n      response[human_or_ai]['is_game_won'] == true\n    ) {\n      this.show_button = false;\n      this.msg_to_show = response[human_or_ai]['msg'];\n      this.colorWinningTokens(response[human_or_ai]['winning_cells']);\n      return false;\n    }\n\n    return true;\n  }\n\n  // Marks the winning tokens taking\n  colorWinningTokens(cells_array: number[][]): void {\n    //Loop through winning cells\n    cells_array.forEach((cell) => {\n      let row: number = cell[0];\n      let column: number = cell[1];\n\n      //Calculate the positions in pixels to mark the winning token\n      let position_left: number, position_top: number;\n      [position_left, position_top] = this.calculateTokenPositionsCSS(\n        row,\n        column,\n        50,\n        48\n      );\n\n      let winning_token = {\n        //\"row\": row,\n        //\"column\": column,\n        position_left: position_left + 'px',\n        position_top: position_top + 'px',\n      };\n\n      this.winning_tokens.push(winning_token);\n    });\n  }\n}\n","<h1>Connect Four Game</h1>\r\n<h6>(You play as yellow, red is an AI)</h6>\r\n<h2 class=\"info\" id=\"info_msg\">{{msg_to_show}}</h2>\r\n\r\n<div>\r\n    <form id=\"column_form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n        <label><input type=\"radio\" [(ngModel)]=\"data_form.answer\" name=\"answer\" value=\"1\">1st</label>\r\n        <label><input type=\"radio\" [(ngModel)]=\"data_form.answer\" name=\"answer\" value=\"2\">2nd</label>\r\n        <label><input type=\"radio\" [(ngModel)]=\"data_form.answer\" name=\"answer\" value=\"3\">3rd</label>\r\n        <label><input type=\"radio\" [(ngModel)]=\"data_form.answer\" name=\"answer\" value=\"4\">4th</label>\r\n        <label><input type=\"radio\" [(ngModel)]=\"data_form.answer\" name=\"answer\" value=\"5\">5th</label>\r\n        <label><input type=\"radio\" [(ngModel)]=\"data_form.answer\" name=\"answer\" value=\"6\">6th</label>\r\n        <label><input type=\"radio\" [(ngModel)]=\"data_form.answer\" name=\"answer\" value=\"7\">7th</label><br>\r\n\r\n\r\n        <button *ngIf=\"show_button == true\" type=\"submit\">Submit</button>\r\n    </form>\r\n</div>\r\n\r\n<div id=\"game-base\">\r\n    <div id=\"game-table\">\r\n\r\n        <!-- loop through the tokens_to_add array and add one of them-->\r\n        <div *ngFor=\"let token of tokens_to_add; let i = index\">\r\n\r\n            <div style.top=\"{{token.position_top}}\" style.left=\"{{token.position_left}}\" id=\"d{{token.token_id}}\"\r\n                class=\"disc {{token.color}}\">\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <!-- Winning tokens marked-->\r\n        <div *ngFor=\"let wt of winning_tokens; let i = index\">\r\n            \r\n\r\n            <!-- Add and smaller black circle to the winning tokens-->\r\n            <div style.top=\"{{wt.position_top}}\" style.left=\"{{wt.position_left}}\"\r\n                class=\"winning_token\">\r\n            </div>\r\n\r\n        </div>\r\n\r\n    </div>\r\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}