{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let HelloWorldComponent = class HelloWorldComponent {\n  ngOnInit() {\n    for (let row = 0; row < 6; row++) {\n      this.matrix_board.push([]);\n      for (let column = 0; column < 7; column++) {\n        this.matrix_board[row].push(0);\n      }\n    }\n    console.log(\"ON INIT\");\n  }\n  constructor(http) {\n    this.http = http;\n    this.title = \"Hello\";\n    this.matrix_board = [];\n    this.formData = {\n      answer: ''\n    };\n    this.data_form = {\n      answer: ''\n    };\n  }\n  sendPostRequest(url, data) {\n    return this.http.post(url, data);\n  }\n  sendReqFlask() {\n    let api_url = \"http://localhost:5000\";\n    let post_data = {\n      \"data\": {\n        \"answer\": 1\n      },\n      \"matrix_board\": this.matrix_board\n    };\n    this.sendPostRequest(api_url, post_data).subscribe(response => {\n      console.log('Success!', response);\n      //Update Matrix\n      let response_data = Object.values(response);\n      console.log(response_data[0][\"matrix_board\"]);\n      this.matrix_board = response_data[0][\"matrix_board\"];\n    }, error => {\n      console.error('Error:', error);\n    });\n  }\n  onSubmit() {\n    console.log(this.data_form.answer);\n  }\n};\nHelloWorldComponent = __decorate([Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: ['./hello-world.component.css']\n})], HelloWorldComponent);","map":{"version":3,"names":["Component","HelloWorldComponent","ngOnInit","row","matrix_board","push","column","console","log","constructor","http","title","formData","answer","data_form","sendPostRequest","url","data","post","sendReqFlask","api_url","post_data","subscribe","response","response_data","Object","values","error","onSubmit","__decorate","selector","templateUrl","styleUrls"],"sources":["/code/angular_app/src/app/hello-world/hello-world.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { NgModule } from '@angular/core';\n\n\n@Component({\n  selector: 'app-hello-world',\n  templateUrl: './hello-world.component.html',\n  styleUrls: ['./hello-world.component.css']\n})\n\n\nexport class HelloWorldComponent implements OnInit {\n\n  title: string = \"Hello\";\n  matrix_board: number[][] = [];\n  formData = { answer: '' };\n\n\n  ngOnInit(): void {\n    for (let row = 0; row < 6; row++) {\n      this.matrix_board.push([])\n\n      for (let column = 0; column < 7; column++) {\n        this.matrix_board[row].push(0);\n      }\n    }\n\n    console.log(\"ON INIT\")\n  }\n\n  constructor(private http: HttpClient) { }\n\n\n  sendPostRequest(url: string, data: any): Observable<Object> {\n    return this.http.post(url, data);\n  }\n\n  sendReqFlask() {\n\n\n    let api_url: string = \"http://localhost:5000\";\n    let post_data: any = {\n      \"data\": { \"answer\": 1 },\n      \"matrix_board\": this.matrix_board\n    };\n\n    this.sendPostRequest(api_url, post_data).subscribe(\n      (response: Object) => {\n        console.log('Success!', response);\n\n        //Update Matrix\n        let response_data = Object.values(response);\n\n        console.log(response_data[0][\"matrix_board\"])\n\n        this.matrix_board = response_data[0][\"matrix_board\"]\n\n      },\n      (error) => {\n        console.error('Error:', error);\n      }\n    )\n\n  }\n\n\n\n  data_form = {\n    answer: '',\n  };\n\n  onSubmit() {\n    console.log(this.data_form.answer)\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAa1C,WAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAO9BC,QAAQA,CAAA;IACN,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,IAAI,CAACC,YAAY,CAACC,IAAI,CAAC,EAAE,CAAC;MAE1B,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,CAAC,EAAEA,MAAM,EAAE,EAAE;QACzC,IAAI,CAACF,YAAY,CAACD,GAAG,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;;;IAIlCE,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACxB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAjBxB,KAAAC,KAAK,GAAW,OAAO;IACvB,KAAAP,YAAY,GAAe,EAAE;IAC7B,KAAAQ,QAAQ,GAAG;MAAEC,MAAM,EAAE;IAAE,CAAE;IAoDzB,KAAAC,SAAS,GAAG;MACVD,MAAM,EAAE;KACT;EAvCuC;EAGxCE,eAAeA,CAACC,GAAW,EAAEC,IAAS;IACpC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACF,GAAG,EAAEC,IAAI,CAAC;EAClC;EAEAE,YAAYA,CAAA;IAGV,IAAIC,OAAO,GAAW,uBAAuB;IAC7C,IAAIC,SAAS,GAAQ;MACnB,MAAM,EAAE;QAAE,QAAQ,EAAE;MAAC,CAAE;MACvB,cAAc,EAAE,IAAI,CAACjB;KACtB;IAED,IAAI,CAACW,eAAe,CAACK,OAAO,EAAEC,SAAS,CAAC,CAACC,SAAS,CAC/CC,QAAgB,IAAI;MACnBhB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEe,QAAQ,CAAC;MAEjC;MACA,IAAIC,aAAa,GAAGC,MAAM,CAACC,MAAM,CAACH,QAAQ,CAAC;MAE3ChB,OAAO,CAACC,GAAG,CAACgB,aAAa,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;MAE7C,IAAI,CAACpB,YAAY,GAAGoB,aAAa,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC;IAEtD,CAAC,EACAG,KAAK,IAAI;MACRpB,OAAO,CAACoB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CACF;EAEH;EAQAC,QAAQA,CAAA;IACNrB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACM,SAAS,CAACD,MAAM,CAAC;EACpC;CAED;AAhEYZ,mBAAmB,GAAA4B,UAAA,EAP/B7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EAGW/B,mBAAmB,CAgE/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}